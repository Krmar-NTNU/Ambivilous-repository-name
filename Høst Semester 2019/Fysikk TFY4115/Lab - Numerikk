from eksternlab import height, slope, curvature
import unittest
import numpy as np
from matplotlib import pyplot as plt



g = 981

m1 = 30.5
m2 = 27.6
m3 = 2.3

tall_m1 = 2/5  # kompakt kule, er samme som c: I_{0}/(m*r^2)
tall_m2 = 2/5  # sprettball
tall_m3 = 2/3  # pingpong
N = 13800  # antall step

# initielle verdier
t_0 = 0.0
x_0 = 0.0
v_0 = 0.0
a_0 = 0.0


xtemp = [0.0, 20, 40, 60, 80, 100, 120, 140]  # x-koordinater til banen
ytemp = [21.1, 14.9, 17.2, 9, 0.6, 0.0, 0.0, 0.0] # y-koordinater til banen

h = height(xtemp, ytemp)  # h√∏yden til bane


t = np.zeros(N + 1)
x_m1 = np.zeros(N + 1)
x_m2 = np.zeros(N + 1)
x_m3 = np.zeros(N + 1)
v_m1 = np.zeros(N + 1)
v_m2 = np.zeros(N + 1)
v_m3 = np.zeros(N + 1)
nor_m1 = np.zeros(N+1)  # normalkraft
nor_m2 = np.zeros(N+1)
nor_m3 = np.zeros(N+1)
fri_m1 = np.zeros(N+1)  # friksjonskraft
fri_m2 = np.zeros(N+1)
fri_m3 = np.zeros(N+1)

dt = 0.0001
x_m1[0] = x_0
x_m2[0] = x_0
x_m3[0] = x_0
v_m1[0] = v_0
v_m2[0] = v_0
v_m3[0] = v_0
nor_m1[0] = (v_m1[0]**2)/(1/curvature(h, x_m1[0])) + g*np.cos(slope(h, x_m1[0]))  # R(x) = 1/curvature, alpha = slope
nor_m2[0] = (v_m2[0]**2)/(1/curvature(h, x_m2[0])) + g*np.cos(slope(h, x_m2[0]))
nor_m3[0] = (v_m3[0]**2)/(1/curvature(h, x_m3[0])) + g*np.cos(slope(h, x_m3[0]))
fri_m1[0] = g*np.sin(slope(h, x_m1[0])) - g*np.sin(slope(h, x_m1[0]))/(1 + tall_m1)
fri_m2[0] = g*np.sin(slope(h, x_m2[0])) - g*np.sin(slope(h, x_m2[0]))/(1 + tall_m2)
fri_m3[0] = g*np.sin(slope(h, x_m3[0])) - g*np.sin(slope(h, x_m3[0]))/(1 + tall_m3)

for n in range(N):
    #Eulers metode

    alpha_m1 = slope(h, x_m1[n])  # beregner hellningsvinkelen
    alpha_m2 = slope(h, x_m2[n])
    alpha_m3 = slope(h, x_m3[n])
    x_m1_new = x_m1[n] + (dt * v_m1[n] * np.cos(alpha_m1))
    x_m2_new = x_m2[n] + (dt * v_m2[n] * np.cos(alpha_m2))
    x_m3_new = x_m3[n] + (dt * v_m3[n] * np.cos(alpha_m3))
    v_m1_new = v_m1[n] + (g * np.sin(alpha_m1)/(1 + tall_m1)*dt)
    v_m2_new = v_m2[n] + (g * np.sin(alpha_m2) / (1 + tall_m2) * dt)
    v_m3_new = v_m3[n] + (g * np.sin(alpha_m3) / (1 + tall_m3) * dt)

    t[n+1] = t[n] + dt
    x_m1[n+1] = x_m1_new
    x_m2[n + 1] = x_m2_new
    x_m3[n + 1] = x_m3_new
    v_m1[n+1] = v_m1_new
    v_m2[n + 1] = v_m2_new
    v_m3[n + 1] = v_m3_new
    nor_m1[n+1] = (v_m1[n+1]**2)/(1/curvature(h, x_m1[n+1])) + g*np.cos(slope(h, x_m1[n+1])) # N/m
    nor_m2[n + 1] = (v_m2[n + 1] ** 2) / (1 / curvature(h, x_m2[n + 1])) + g * np.cos(slope(h, x_m2[n + 1]))
    nor_m3[n + 1] = (v_m3[n + 1] ** 2) / (1 / curvature(h, x_m3[n + 1])) + g * np.cos(slope(h, x_m3[n + 1]))
    fri_m1[n+1] = g*np.sin(slope(h, x_m1[n+1])) - g*np.sin(slope(h, x_m1[n+1]))/(1 + tall_m1)  # f/m
    fri_m2[n + 1] = g * np.sin(slope(h, x_m2[n + 1])) - g * np.sin(slope(h, x_m2[n + 1])) / (1 + tall_m2)
    fri_m3[n + 1] = g * np.sin(slope(h, x_m3[n + 1])) - g * np.sin(slope(h, x_m3[n + 1])) / (1 + tall_m3)


plt.figure()
plt.plot(t, x_m1, t, x_m2, t, x_m3)
plt.xlabel(r'$t$')
plt.ylabel(r'$x(t)$')
plt.grid()
plt.show()

plt.figure()
plt.plot(t,v_m1, t, v_m2, t, v_m3)
plt.xlabel(r'$t$')
plt.ylabel(r'$v(t)$')
plt.grid()
plt.show()

plt.figure()
plt.plot(t, fri_m1)
plt.plot(t, fri_m2)
plt.plot(t, fri_m3)
plt.xlabel(r'$t$')
plt.ylabel(r'$N$')
plt.grid()
plt.show()



plt.figure()
plt.plot(t, nor_m1)
plt.plot(t, nor_m2)
plt.plot(t, nor_m3)
plt.xlabel(r'$t$')
plt.ylabel(r'$N$')
plt.grid()
plt.show()
